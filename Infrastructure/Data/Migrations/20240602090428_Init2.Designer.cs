// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(KitePawnDBContext))]
    [Migration("20240602090428_Init2")]
    partial class Init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Action", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "89-602 Łomża Akacjowa 22",
                            Name = "Branch 1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Phones"
                        },
                        new
                        {
                            ID = 2,
                            Name = "RTV"
                        },
                        new
                        {
                            ID = 3,
                            Name = "AGD"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Tools"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<float>("InterestPerDay")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            ID = "L/01/05/24",
                            CustomerID = 1,
                            DateEnd = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeID = 1,
                            InterestPerDay = 0.05f
                        },
                        new
                        {
                            ID = "L/02/05/24",
                            CustomerID = 2,
                            DateEnd = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeID = 1,
                            InterestPerDay = 0.05f
                        },
                        new
                        {
                            ID = "L/03/05/24",
                            CustomerID = 3,
                            DateEnd = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeID = 1,
                            InterestPerDay = 0.05f
                        },
                        new
                        {
                            ID = "L/04/05/24",
                            CustomerID = 4,
                            DateEnd = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeID = 1,
                            InterestPerDay = 0.05f
                        },
                        new
                        {
                            ID = "L/05/05/24",
                            CustomerID = 5,
                            DateEnd = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeID = 1,
                            InterestPerDay = 0.05f
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "32-012 Krosno Klasztorna 12/2",
                            EmailAddress = "augue.ac@hotmail.com",
                            FirstName = "Danuta",
                            LastName = "Gajewska",
                            PhoneNumber = "165706656"
                        },
                        new
                        {
                            ID = 2,
                            Address = "73-520 Sopot Piesza 13",
                            EmailAddress = "felis.purus.ac@hotmail.net",
                            FirstName = "Zdzisław",
                            LastName = "Łuczak",
                            PhoneNumber = "314360952"
                        },
                        new
                        {
                            ID = 3,
                            Address = "06-571 Siemianowice Śląskie Leśna 24/8",
                            EmailAddress = "morbi.tristique.senectus@hotmail.net",
                            FirstName = "Błażej",
                            LastName = "Urbaniak",
                            PhoneNumber = "679702769"
                        },
                        new
                        {
                            ID = 4,
                            Address = "79-204 Zamość Leśna 44",
                            EmailAddress = "sit.amet@hotmail.couk",
                            FirstName = "Zuzanna",
                            LastName = "Kania",
                            PhoneNumber = "384028471"
                        },
                        new
                        {
                            ID = 5,
                            Address = "57-490 Dąbrowa Górnicza Sosnowa 23",
                            EmailAddress = "fusce.dolor@aol.org",
                            FirstName = "Svitlana",
                            LastName = "Bednarczyk",
                            PhoneNumber = "521411614"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "34-700 Kraków Na Błonie 3/33",
                            EmailAddress = "latawiec@student.agh.edu.pl",
                            FirstName = "Jakub",
                            LastName = "Latawiec",
                            Password = "zaq1@WSX",
                            PhoneNumber = "123123123"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EmployeeInBranch", b =>
                {
                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("BranchID", "EmployeeID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeesInBranches");

                    b.HasData(
                        new
                        {
                            BranchID = 1,
                            EmployeeID = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ContractID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<float>("PricePerItem")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ContractID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BranchID = 1,
                            CategoryID = 1,
                            ContractID = "L/01/05/24",
                            Count = 1,
                            Name = "Samsung Galaxy S20 5G SM-G981B 8/128GB",
                            PricePerItem = 1200f
                        },
                        new
                        {
                            ID = 2,
                            BranchID = 1,
                            CategoryID = 4,
                            ContractID = "L/02/05/24",
                            Count = 1,
                            Name = "Makita Td001Gm201",
                            PricePerItem = 2050f
                        },
                        new
                        {
                            ID = 3,
                            BranchID = 1,
                            CategoryID = 2,
                            ContractID = "L/03/05/24",
                            Count = 1,
                            Name = "LG 55UR78003LK 55\" 4K Smart TV DVB-T2 Telewizor LED",
                            PricePerItem = 1580f
                        },
                        new
                        {
                            ID = 4,
                            BranchID = 1,
                            CategoryID = 3,
                            ContractID = "L/03/05/24",
                            Count = 1,
                            Name = "SIEMENS EQ.6 Plus S100 TE651209RW",
                            PricePerItem = 1580f
                        });
                });

            modelBuilder.Entity("Domain.Entities.Action", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Actions")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.EmployeeInBranch", b =>
                {
                    b.HasOne("Domain.Entities.Branch", "Branch")
                        .WithMany("EmployeesInBranches")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeesInBranches")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithMany("Products")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Category");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Navigation("EmployeesInBranches");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Contracts");

                    b.Navigation("EmployeesInBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
